as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
kk=4
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
kk=5
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
kk=6
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
View(reactor.details)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Now find the number of replicates (no information is provided in the JHU data)
# Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(isnan(reactor.details$sample.ID)))
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(is.nan(reactor.details$sample.ID)))
s.nan(reactor.details$sample.ID)
is.nan(reactor.details$sample.ID)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
reactor.details$sample.ID != "NA"
reactor.details$sample.ID != 'NA'
isempty(reactor.details$sample.ID)
is.empty(reactor.details$sample.ID)
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(reactor.details$sample.ID != "NA"),)
reactor.details$sample.ID != "NA")
reactor.details$sample.ID != "NA"
reactor.details$sample.ID(reactor.details$sample.ID != "NA",)
reactor.details$sample.ID(reactor.details$sample.ID != "NA")
(reactor.details$sample.ID != "NAN")
reactor.details$sample.ID != NA
reactor.details$sample.ID != NAN
reactor.details$sample.ID != NA
is.na(reactor.details$sample.ID)
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(!is.na(reactor.details$sample.ID))
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(!is.na(reactor.details$sample.ID)))
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID(!is.na(reactor.details$sample.ID)))
!is.na(reactor.details$sample.ID
)
reactor.details$sample.ID(!is.na(reactor.details$sample.ID))
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID[!is.na(reactor.details$sample.ID)])
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(curSamp)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
uniq.sample.ID.all = unique(reactor.details$sample.ID[!is.na(reactor.details$sample.ID)])
for (kj in 1:length(uniq.sample.ID.all)) {
# Find current subset of analyses
curSamp <- subset(reactor.details, sample.ID == uniq.sample.ID.all[kj])
# curSamp$group.num <- matrix(0, nrow = nrow(curSamp), ncol = 1)
curSamp$rep.num <- 1:nrow(curSamp)
# Assign the replicate numbers to their correct indices in reactor.details and then move to next sample
for (kkk in 1:nrow(curSamp)) {
row.match <-
as.numeric(match(curSamp$IPL.num[kkk], reactor.details$IPL.num))
reactor.details$rep.num[row.match] <- curSamp$rep.num[kkk]
}
}
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Now that the names are all in order, find the number of replicates (no
# information is provided in the JHU data) Find all the unique samples
reactor.details$rep.num <- matrix(0, nrow = nrow(reactor.details), ncol = 1)-9999 # set up column
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
View(reactor.final)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.final)
View(curr.reactor)
View(reactor.details)
View(curr.reactor)
View(curr.reactorsafe)
View(reactor.final)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.details)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Fill in information into the appropriate columns
curr.reactor$IPL.num <- curr.reactor.JHU$JHU.num
curr.reactor$Type.1 <- curr.reactor.JHU$Type.1
curr.reactor$Type.2 <- curr.reactor.JHU$Type.2
curr.reactor$sample.ID <- curr.reactor.JHU$sample.ID
curr.reactor$d33 <- curr.reactor.JHU$raw.d33
curr.reactor$d33.err <- curr.reactor.JHU$raw.d33.stdv
curr.reactor$d34 <- curr.reactor.JHU$raw.d34
curr.reactor$d34.err <- curr.reactor.JHU$raw.d34.stdv
curr.reactor$Date.Time <- curr.reactor.JHU$date
curr.reactor$'33.mismatch.R2' <- curr.reactor.JHU$d33.voltmiss.corr
curr.reactor$'34.mismatch.R2' <- curr.reactor.JHU$d34.voltmiss.corr
curr.reactor$reactor.ID <- curr.reactor.JHU$session.ID.range
curr.reactor$flag.analysis <- curr.reactor.JHU$flag_analytical
curr.reactor$IPL.ID <- curr.reactor.JHU$Analytical.ID
# Put all information that UM code doesn't use into comments so it stays with the data
curr.reactor$comments <- c(curr.reactor.JHU$session.name,
curr.reactor.JHU$session.numeric,
curr.reactor.JHU$Reduction.ID,
curr.reactor.JHU$CDW.num,
curr.reactor.JHU$sample.descrip,
curr.reactor.JHU$replicate.set,
curr.reactor.JHU$project,
curr.reactor.JHU$flag_normalize,
curr.reactor.JHU$'flag notes',
curr.reactor.JHU$comments,
curr.reactor.JHU$O2.yield,
curr.reactor.JHU$O2.resid,
curr.reactor.JHU$comments)
# Put all information that UM code doesn't use into comments so it stays with the data
curr.reactor$comments <- paste(curr.reactor.JHU$session.name,
curr.reactor.JHU$session.numeric,
curr.reactor.JHU$Reduction.ID,
curr.reactor.JHU$CDW.num,
curr.reactor.JHU$sample.descrip,
curr.reactor.JHU$replicate.set,
curr.reactor.JHU$project,
curr.reactor.JHU$flag_normalize,
curr.reactor.JHU$'flag notes',
curr.reactor.JHU$comments,
curr.reactor.JHU$O2.yield,
curr.reactor.JHU$O2.resid,
curr.reactor.JHU$comments,
sep=", ")
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.final)
warnings()
View(curr.reactor)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.details)
View(curr.reactor.JHU)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.final)
a=curr.reactor.JHU$raw.d34
# Since raw d18O values are not given, use the d34 data as a reasonable proxy
# (it actually uses d.18O.Final, but this doesn't exist for the JHU data).
curr.reactor$d.18O.Final <- curr.reactor.JHU$raw.d34
# clear all previous variables EXCEPT the reactor file names
rm(list = ls()[!ls() %in% c("reactor.file.names", "k", "path.data.red")])
# Get the current reactor data
curr.reactordata <- reactor.file.names[k]
#### Set input and output files ####
# Input path
path.in <- "0000_LabFileFormatting/000_Reactor Spreadsheet Raw/JHU data"
setwd(paste(path.data.red, "/", path.in, "/", sep=""))
curr.reactorsafe <- read_excel(curr.reactordata,col_names = T)
curr.reactor.JHU <- curr.reactorsafe
# Output path
#define a plot path for output files (where do you want them to go?)
path.out <- "0000_LabFileFormatting/001_Reactor Spreadsheet Formatted/"
# Set up a blank reactor with all of the needed information
# Set up the names the UMich R code uses
UMcolNames <- c(
"IPL.num",
"User",
"Type.1",
"Type.2",
"sample.ID", # this is changed from the UMich version of the code. JHU data was provided with sample.ID information.
"d17O",
"d.17O",
"d17O.err",
"d18O",
"d.18O",
"d18O.err",
"CAP.17O",
"CAP17O.err",
"d33",
"d33.err",
"d34",
"d34.err",
"d35",
"d35.err",
"d36",
"d36.err",
"Date.Time",
"version",
"33.mismatch.R2",
"34.mismatch.R2",
"d33.SMOW.REF",
"d34.SMOW.REF",
"d17O.SLAP",
"d18O.SLAP",
"d.17O.Final",
"d.18O.Final",
"D17O.Final",
"D17O.per.meg",
"Average",
"Stdev",
"comments",
"reactor.ID",
"primes",
"flag.major",
"flag.analysis"
)
# Make blank reactor
curr.reactor <- data.frame(matrix(ncol = length(UMcolNames), nrow = nrow(curr.reactor.JHU)))
# clear all previous variables EXCEPT the reactor file names
rm(list = ls()[!ls() %in% c("reactor.file.names", "k", "path.data.red")])
# Get the current reactor data
curr.reactordata <- reactor.file.names[k]
#### Set input and output files ####
# Input path
path.in <- "0000_LabFileFormatting/000_Reactor Spreadsheet Raw/JHU data"
setwd(paste(path.data.red, "/", path.in, "/", sep=""))
curr.reactorsafe <- read_excel(curr.reactordata,col_names = T)
curr.reactor.JHU <- curr.reactorsafe
# Output path
#define a plot path for output files (where do you want them to go?)
path.out <- "0000_LabFileFormatting/001_Reactor Spreadsheet Formatted/"
# Set up a blank reactor with all of the needed information
# Set up the names the UMich R code uses
UMcolNames <- c(
"IPL.num",
"User",
"Type.1",
"Type.2",
"sample.ID", # this is changed from the UMich version of the code. JHU data was provided with sample.ID information.
"d17O",
"d.17O",
"d17O.err",
"d18O",
"d.18O",
"d18O.err",
"CAP.17O",
"CAP17O.err",
"d33",
"d33.err",
"d34",
"d34.err",
"d35",
"d35.err",
"d36",
"d36.err",
"Date.Time",
"version",
"33.mismatch.R2",
"34.mismatch.R2",
"d33.SMOW.REF",
"d34.SMOW.REF",
"d17O.SLAP",
"d18O.SLAP",
"d.17O.Final",
"d.18O.Final",
"D17O.Final",
"D17O.per.meg",
"Average",
"Stdev",
"comments",
"reactor.ID",
"primes",
"flag.major",
"flag.analysis"
)
# Make blank reactor
curr.reactor <- data.frame(matrix(ncol = length(UMcolNames), nrow = nrow(curr.reactor.JHU)))
# Assign column names to blank reactor
colnames(curr.reactor) <- UMcolNames
# Fill in information into the appropriate columns
curr.reactor$IPL.num <- curr.reactor.JHU$JHU.num
curr.reactor$Type.1 <- curr.reactor.JHU$Type.1
curr.reactor$Type.2 <- curr.reactor.JHU$Type.2
curr.reactor$sample.ID <- curr.reactor.JHU$sample.ID
curr.reactor$d33 <- curr.reactor.JHU$raw.d33
curr.reactor$d33.err <- curr.reactor.JHU$raw.d33.stdv
curr.reactor$d34 <- curr.reactor.JHU$raw.d34
curr.reactor$d34.err <- curr.reactor.JHU$raw.d34.stdv
curr.reactor$Date.Time <- curr.reactor.JHU$date
curr.reactor$'33.mismatch.R2' <- curr.reactor.JHU$d33.voltmiss.corr
curr.reactor$'34.mismatch.R2' <- curr.reactor.JHU$d34.voltmiss.corr
curr.reactor$reactor.ID <- curr.reactor.JHU$session.ID.range
curr.reactor$flag.analysis <- curr.reactor.JHU$flag_analytical
curr.reactor$IPL.ID <- curr.reactor.JHU$Analytical.ID
# Put all information that UM code doesn't use into comments so it stays with the data
curr.reactor$comments <- paste("session.name",
curr.reactor.JHU$session.name,
"session.numeric",
curr.reactor.JHU$session.numeric,
"Reduction.ID",
curr.reactor.JHU$Reduction.ID,
"CDW.num",
curr.reactor.JHU$CDW.num,
"sample.descrip",
curr.reactor.JHU$sample.descrip,
"replicate.set",
curr.reactor.JHU$replicate.set,
"project",
curr.reactor.JHU$project,
"flag_normalize",
curr.reactor.JHU$flag_normalize,
"flag notes",
curr.reactor.JHU$'flag notes',
"comments",
curr.reactor.JHU$comments,
"O2.yield",
curr.reactor.JHU$O2.yield,
"O2.resid",
curr.reactor.JHU$O2.resid,
"comments",
curr.reactor.JHU$comments,
sep=", ")
# Since raw d18O values are not given, use the d34 data as a reasonable proxy
# (it actually uses d.18O.Final, but this doesn't exist for the JHU data).
curr.reactor$d.18O.Final <- curr.reactor.JHU$raw.d34
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
View(reactor.final)
# put date time in appropriate format
curr.reactor$Date.Time <-
a <- as.Date(curr.reactor$Date.Time)
# put date time in appropriate format
curr.reactor$Date.Time <-
a <- as.Date(curr.reactor$Date.Time,"MMM_YYYY")
View(curr.reactor)
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# put date time in appropriate format
# curr.reactor$Date.Time <-
a <- as.Date(curr.reactor$Date.Time,"DD_MMM")
# put date time in appropriate format
# curr.reactor$Date.Time <-
a <- as.Date(curr.reactor$Date.Time,"%d_%m")
# Find the relevant rows
reactor.number = sessionList[sessNum]
sessNum = 1
# Find the relevant rows
reactor.number = sessionList[sessNum]
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Find the relevant rows
reactor.number = sessionList[sessNum]
testSession <- curr.reactor$reactor.ID == reactor.number
# And put the current dataset into reactor.details (nomenclature follows UM code)
reactor.details <- curr.reactor[testSession,]
# Assign group numbers to each sample (each set of replicates of a sample).
# Do standards first. These are done separately from the unknowns because the Type.2 is a drop-down menu that mitigates any spelling errors in sample ID.
uniq.Type.2 <-
unique(reactor.details$Type.2[reactor.details$Type.1 == "WaterStd" |
reactor.details$Type.1 == "CO2Std"|
reactor.details$Type.1 == "O2Ref"|
reactor.details$Type.1 == "CarbonateStd"])
uniq.Type.2 <- uniq.Type.2[!is.na(uniq.Type.2)]
# Initialize the Group# column
reactor.details$group.num <-
matrix(0, nrow = nrow(reactor.details), ncol = 1)
for (kj in 1:length(uniq.Type.2)) {
# Find current subset of analyses
curSamp <- subset(reactor.details, Type.2 == uniq.Type.2[kj])
curSamp$group.num <- matrix(0, nrow = nrow(curSamp), ncol = 1)
# Now assign group numbers by checking for near-sequential IPL numbers (change of <=2 accounts for one non-sequential IPL#)
curGroup <- 1
curSamp$group.num[1] <- curGroup # always start with group 1
if (nrow(curSamp) > 1) {
# some samples may only have one replicate
for (kk in 2:nrow(curSamp)) {
test.sequential <-
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
if (abs(test.sequential) <= 2) { # '2' allows for one non-sequential IPL#
# if the sample is sequential (note some early IPL# are negative, requires absolute value of test)
curSamp$group.num[kk] <- curGroup
} else {
# the sample is not sequential, start a new group
curGroup <- curGroup + 1
curSamp$group.num[kk] <- curGroup
}
}
}
# Assign the group numbers to their correct indices in reactor.details and then move to next standard
for (kkk in 1:nrow(curSamp)) {
row.match <-
as.numeric(match(curSamp$IPL.num[kkk], reactor.details$IPL.num))
reactor.details$group.num[row.match] <- curSamp$group.num[kkk]
}
}
# Now do the unknowns samples. Note that this is dependent on users consistently entering the same sample name.
uniq.sample.ID = unique(reactor.details$sample.ID[reactor.details$Type.1 ==
"Water" |
reactor.details$Type.1 == "Carbonate" |
reactor.details$Type.1 == "CO2" |
reactor.details$Type.1 == "Apatite"])
uniq.sample.ID <- uniq.sample.ID[!is.na(uniq.sample.ID)]
for (kj in 1:length(uniq.sample.ID)) {
# Find current subset of analyses
curSamp <- subset(reactor.details, sample.ID == uniq.sample.ID[kj])
curSamp$group.num <- matrix(0, nrow = nrow(curSamp), ncol = 1)
# Now assign group numbers by checking for near-sequential IPL numbers (change of <2 accounts for one non-sequential IPL#)
curGroup <- 1
curSamp$group.num[1] <- curGroup # always start with group 1
if (nrow(curSamp) > 1) {
# some samples may only have one replicate
for (kk in 2:nrow(curSamp)) {
test.sequential <-
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
if (abs(test.sequential) <= 2) {
# if the sample is sequential (note some early IPL# are negative, requires absolute value of test)
curSamp$group.num[kk] <- curGroup
} else {
# the sample is not sequential, start a new group
curGroup <- curGroup + 1
curSamp$group.num[kk] <- curGroup
}
}
}
# Assign the group numbers to their correct indices in reactor.details and then move to next sample
for (kkk in 1:nrow(curSamp)) {
row.match <-
as.numeric(match(curSamp$IPL.num[kkk], reactor.details$IPL.num))
reactor.details$group.num[row.match] <- curSamp$group.num[kkk]
}
}
uniq.Type.2 <- uniq.Type.2[!is.na(uniq.Type.2)]
# Initialize the Group# column
reactor.details$group.num <-
matrix(0, nrow = nrow(reactor.details), ncol = 1)
for (kj in 1:length(uniq.Type.2)) {
# Find current subset of analyses
curSamp <- subset(reactor.details, Type.2 == uniq.Type.2[kj])
curSamp$group.num <- matrix(0, nrow = nrow(curSamp), ncol = 1)
# Now assign group numbers by checking for near-sequential IPL numbers (change of <=2 accounts for one non-sequential IPL#)
curGroup <- 1
curSamp$group.num[1] <- curGroup # always start with group 1
if (nrow(curSamp) > 1) {
# some samples may only have one replicate
for (kk in 2:nrow(curSamp)) {
test.sequential <-
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
if (abs(test.sequential) <= 2) { # '2' allows for one non-sequential IPL#
# if the sample is sequential (note some early IPL# are negative, requires absolute value of test)
curSamp$group.num[kk] <- curGroup
} else {
# the sample is not sequential, start a new group
curGroup <- curGroup + 1
curSamp$group.num[kk] <- curGroup
}
}
}
# Assign the group numbers to their correct indices in reactor.details and then move to next standard
for (kkk in 1:nrow(curSamp)) {
row.match <-
as.numeric(match(curSamp$IPL.num[kkk], reactor.details$IPL.num))
reactor.details$group.num[row.match] <- curSamp$group.num[kkk]
}
}
# Now do the unknowns samples. Note that this is dependent on users consistently entering the same sample name.
uniq.sample.ID = unique(reactor.details$sample.ID[reactor.details$Type.1 ==
"Water" |
reactor.details$Type.1 == "Carbonate" |
reactor.details$Type.1 == "CO2" |
reactor.details$Type.1 == "Apatite"])
uniq.sample.ID <- uniq.sample.ID[!is.na(uniq.sample.ID)]
for (kj in 1:length(uniq.sample.ID)) {
# Find current subset of analyses
curSamp <- subset(reactor.details, sample.ID == uniq.sample.ID[kj])
curSamp$group.num <- matrix(0, nrow = nrow(curSamp), ncol = 1)
# Now assign group numbers by checking for near-sequential IPL numbers (change of <2 accounts for one non-sequential IPL#)
curGroup <- 1
curSamp$group.num[1] <- curGroup # always start with group 1
if (nrow(curSamp) > 1) {
# some samples may only have one replicate
for (kk in 2:nrow(curSamp)) {
test.sequential <-
as.numeric(curSamp$IPL.num[kk]) - as.numeric(curSamp$IPL.num[kk - 1])
if (abs(test.sequential) <= 2) {
# if the sample is sequential (note some early IPL# are negative, requires absolute value of test)
curSamp$group.num[kk] <- curGroup
} else {
# the sample is not sequential, start a new group
curGroup <- curGroup + 1
curSamp$group.num[kk] <- curGroup
}
}
}
# Assign the group numbers to their correct indices in reactor.details and then move to next sample
for (kkk in 1:nrow(curSamp)) {
row.match <-
as.numeric(match(curSamp$IPL.num[kkk], reactor.details$IPL.num))
reactor.details$group.num[row.match] <- curSamp$group.num[kkk]
}
}
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Pull out the different session.ID.range values within this spreadsheet
sessionList <- unique(curr.reactor$reactor.ID[is.na(curr.reactor$reactor.ID)])
# Pull out the different session.ID.range values within this spreadsheet
sessionList <- unique(curr.reactor$reactor.ID[!is.na(curr.reactor$reactor.ID)])
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_JHU_V01.R')
# Also write out the session number information. This is just for keeping track
# of the different file names for the next step
write.csv(sessionList,"JHU_sessionList.csv")
