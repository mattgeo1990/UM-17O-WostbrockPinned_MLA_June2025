maps::map(database="world", fill=TRUE, col="black")
maps::map.axes()
dfTest0 <- df_rhn[,1:3]
dfTest <- na.omit(dfTest0)
val = dfTest[,3]
rhnNorm <- (val + abs(min(val)))/max(val + abs(min(val)))
# dfTest <- df_rhn[,1:3]
dfTest[,3] <- rhnNorm
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(-90,90))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(-90,90))
abline(map(database="world", fill=FALSE, col="black"))
abline(map(database="world", fill=TRUE, col="white"))
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(-90,90))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(-90,90))
lines(map(database="world", fill=TRUE, col="white"))
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
## world map stuff
require(maps)
maps::map(database="world", fill=TRUE, col="black")
maps::map.axes()
dfTest0 <- df_rhn[,1:3]
dfTest <- na.omit(dfTest0)
val = dfTest[,3]
rhnNorm <- (val + abs(min(val)))/max(val + abs(min(val)))
# dfTest <- df_rhn[,1:3]
dfTest[,3] <- rhnNorm
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,1))
cexVal = 1
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
cexVal = .5
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
cexVal = .4
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,180), ylim=c(0,2))
cexVal = .4
plot(dfTest$lon-0+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,-120), ylim=c(0,2))
points(dfTest$lon-360+0.5, dfTest$lat+0.5, pch = 15, cex = cexVal, col = gray(dfTest[,3]),
xlim=c(-180,-120), ylim=c(0,2))
#packages
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
# Clear the workspace and plots
rm(list = ls())
if (!is.null(dev.list()))
dev.off()
# Define path to the functions needed for this program
path.to.functions <- "D:/Documents/000_Michigan/Publications/Huth_Cave D17O Paleoclimate/relative humidity map/"
# Function sources
source(paste(path.to.functions, "netCDF.extractor_V02.R", sep = ""))
# Extract netCDF files and extract information into a dataframe
# For atmospheric relative humidity
folder1 = "D:/Documents/000_Michigan/Publications/Huth_Cave D17O Paleoclimate/relative humidity map/"
# specific humidity (g/kg)
file1 = "shum.ltm"
varName1 = "shum"
df_shum = netCDF.extractor(folder1,file1,varName1)
# sea level pressure (millibars)
file2 = "slp.ltm"
varName2 = "slp"
df_slp = netCDF.extractor(folder1,file2,varName2)
# sea surface temperature (deg C)
file3 = "sst.ltm"
varName3 = "sst"
df_sst = netCDF.extractor(folder1,file3,varName3)
# relative humidity
file4 = "rhum.ltm"
varName4 = "rhum"
df_rhum = netCDF.extractor(folder1,file4,varName4)
###############################################################################
# Calculate relative humidity normalized to sea surface temperature
# Following Wallace and Hobbs (2006, Atmospheric Science; 3.5.1, pg. 80)
# Saturation vapor pressure calculated with Teten's equation (over fresh water)
# Make dataframes without lat-long information - will overwrite this later
# Also convert units where needed
# specific humidity in kg water vapor/kg total air (functionally unitless)
shum <- df_shum[,3:ncol(df_shum)]/1000
# Sea level pressure in kPa
slp <- df_slp[,3:ncol(df_slp)]/10
# Sea surface temperature in degrees Celcius
sst <- df_sst[,3:ncol(df_sst)]
# Calculate mixing ratio from specific humidity
w = shum/(1-shum)
# Calculate vapor pressure
eps = 0.622 # constant
e = (w/(w+eps))*slp
# Calculate saturation vapor pressure normalized to sea surface temperature
es_sst = 0.61121*exp((18.678-sst/234.5)*(sst/(257.14+sst)))
# Calculate relative humidity normalized to sea surface temperature
rhn = e/es_sst
## For checking relative humidity
rhum <- df_rhum[,3:ncol(df_rhum)]/100
###############################################################################
# Build new array to graph the RH normalized to SST
# Set up final relative humidity dataframe
df_rhn = df_sst
df_rhn[,3:ncol(df_rhn)] = rhum
# rename columns
names(df_rhn) <- c("lon","lat","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov",'dec')
# Copy variable naming from existing netCDF file. They are all the same, so it
# doesn't matter which one
ncpath <- folder1
ncname <- file1
ncfname <- paste(ncpath, ncname, ".nc", sep="")
dname <- varName1
monthPick <- 1 # month to investigate - doesn't affect the dataframe that is output, just for plotting
# open a netCDF file
ncin <- nc_open(ncfname)
print(ncin)
# get longitude and latitude
lon <- ncvar_get(ncin,"lon")
nlon <- dim(lon)
head(lon)
lat <- ncvar_get(ncin,"lat")
nlat <- dim(lat)
head(lat)
# get time
time <- ncvar_get(ncin,"time")
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
# copy lon, lat and time from the initial netCDF data set
lon2 <- lon
lat2 <- lat
time2 <- time
tunits2 <- tunits
nlon2 <- nlon
nlat2 <- nlat
nt2 <- nt
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_sst[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 0, to = 20, by = 3)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhum[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 0, to = 20, by = 3)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhn[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
View(df_rhn)
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhn[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
###############################################################################
# Build new array to graph the RH normalized to SST
# Set up final relative humidity dataframe
df_rhn = df_sst
df_rhn[,3:ncol(df_rhn)] = rhn
# rename columns
names(df_rhn) <- c("lon","lat","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov",'dec')
# Copy variable naming from existing netCDF file. They are all the same, so it
# doesn't matter which one
ncpath <- folder1
ncname <- file1
ncfname <- paste(ncpath, ncname, ".nc", sep="")
dname <- varName1
monthPick <- 1 # month to investigate - doesn't affect the dataframe that is output, just for plotting
# open a netCDF file
ncin <- nc_open(ncfname)
print(ncin)
# get longitude and latitude
lon <- ncvar_get(ncin,"lon")
nlon <- dim(lon)
head(lon)
lat <- ncvar_get(ncin,"lat")
nlat <- dim(lat)
head(lat)
# get time
time <- ncvar_get(ncin,"time")
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
# copy lon, lat and time from the initial netCDF data set
lon2 <- lon
lat2 <- lat
time2 <- time
tunits2 <- tunits
nlon2 <- nlon
nlat2 <- nlat
nt2 <- nt
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhn[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
#packages
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
# Clear the workspace and plots
rm(list = ls())
if (!is.null(dev.list()))
dev.off()
# Define path to the functions needed for this program
path.to.functions <- "D:/Documents/000_Michigan/Publications/Huth_Cave D17O Paleoclimate/relative humidity map/"
# Function sources
source(paste(path.to.functions, "netCDF.extractor_V02.R", sep = ""))
# Extract netCDF files and extract information into a dataframe
# For atmospheric relative humidity
folder1 = "D:/Documents/000_Michigan/Publications/Huth_Cave D17O Paleoclimate/relative humidity map/"
# specific humidity (g/kg)
file1 = "shum.ltm"
varName1 = "shum"
df_shum = netCDF.extractor(folder1,file1,varName1)
# sea level pressure (millibars)
file2 = "slp.ltm"
varName2 = "slp"
df_slp = netCDF.extractor(folder1,file2,varName2)
# sea surface temperature (deg C)
file3 = "sst.ltm"
varName3 = "sst"
df_sst = netCDF.extractor(folder1,file3,varName3)
# relative humidity
file4 = "rhum.ltm"
varName4 = "rhum"
df_rhum = netCDF.extractor(folder1,file4,varName4)
# Make dataframes without lat-long information - will overwrite this later
# Also convert units where needed
# specific humidity in kg water vapor/kg total air (functionally unitless)
shum <- df_shum[,3:ncol(df_shum)]/1000
# Sea level pressure in kPa
slp <- df_slp[,3:ncol(df_slp)]/10
# Sea surface temperature in degrees Celcius
sst <- df_sst[,3:ncol(df_sst)]
# Calculate mixing ratio from specific humidity
w = shum/(1-shum)
# Calculate vapor pressure
eps = 0.622 # constant
e = (w/(w+eps))*slp
# Calculate saturation vapor pressure normalized to sea surface temperature
es_sst = 0.61121*exp((18.678-sst/234.5)*(sst/(257.14+sst)))
# Calculate relative humidity normalized to sea surface temperature
rhn = e/es_sst
## For checking relative humidity
rhum <- df_rhum[,3:ncol(df_rhum)]/100
###############################################################################
# Build new array to graph the RH normalized to SST
# Set up final relative humidity dataframe
df_rhn = df_sst
df_rhn[,3:ncol(df_rhn)] = rhn
# rename columns
names(df_rhn) <- c("lon","lat","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov",'dec')
# Copy variable naming from existing netCDF file. They are all the same, so it
# doesn't matter which one
ncpath <- folder1
ncname <- file1
ncfname <- paste(ncpath, ncname, ".nc", sep="")
dname <- varName1
monthPick <- 1 # month to investigate - doesn't affect the dataframe that is output, just for plotting
# open a netCDF file
ncin <- nc_open(ncfname)
print(ncin)
# get longitude and latitude
lon <- ncvar_get(ncin,"lon")
nlon <- dim(lon)
head(lon)
lat <- ncvar_get(ncin,"lat")
nlat <- dim(lat)
head(lat)
# get time
time <- ncvar_get(ncin,"time")
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
# copy lon, lat and time from the initial netCDF data set
lon2 <- lon
lat2 <- lat
time2 <- time
tunits2 <- tunits
nlon2 <- nlon
nlat2 <- nlat
nt2 <- nt
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhn[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# Calculate relative humidity normalized to sea surface temperature
rhn = e/es_sst*100
## For checking relative humidity
rhum <- df_rhum[,3:ncol(df_rhum)]/100
###############################################################################
# Build new array to graph the RH normalized to SST
# Set up final relative humidity dataframe
df_rhn = df_sst
df_rhn[,3:ncol(df_rhn)] = rhn
# rename columns
names(df_rhn) <- c("lon","lat","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov",'dec')
# Copy variable naming from existing netCDF file. They are all the same, so it
# doesn't matter which one
ncpath <- folder1
ncname <- file1
ncfname <- paste(ncpath, ncname, ".nc", sep="")
dname <- varName1
monthPick <- 1 # month to investigate - doesn't affect the dataframe that is output, just for plotting
# open a netCDF file
ncin <- nc_open(ncfname)
print(ncin)
# get longitude and latitude
lon <- ncvar_get(ncin,"lon")
nlon <- dim(lon)
head(lon)
lat <- ncvar_get(ncin,"lat")
nlat <- dim(lat)
head(lat)
# get time
time <- ncvar_get(ncin,"time")
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
# copy lon, lat and time from the initial netCDF data set
lon2 <- lon
lat2 <- lat
time2 <- time
tunits2 <- tunits
nlon2 <- nlon
nlat2 <- nlat
nt2 <- nt
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhn[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
# convert df_rhn into an array
tmp_mat2 <- as.matrix(df_rhum[3:(3+nt-1)])
dim(tmp_mat2)
# then reshape the array
tmp_array2 <- array(tmp_mat2, dim=c(nlon2,nlat2,nt))
dim(tmp_array2)
# some plots to check creation of arrays
library(lattice)
library(RColorBrewer)
grid <- expand.grid(lon=lon, lat=lat)
# cutpts <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
# cutpts <- seq(from = -10, to = 40, by = 5)
cutpts <- seq(from = 50, to = 100, by = 5)
# the number in tmp_array2[,,x] is the time element (e.g., month)
levelplot(tmp_array2[,,12] ~ lon * lat, data=grid, at=cutpts, cuts=length(cutpts), pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))), main="RH normalized to SST")
install.packages("BRugs")
library(BRugs)
source('D:/Documents/Reading List/Fischer Femal 2020 soil carbonate model/SPATIAL-Lab-soilCCModern-0e4d76a/Theoretical.R')
###Code for conducting validation of soil carbonate model
#load required packages
library(scales)
library(readxl)
library(RColorBrewer)
# Read in input data R workspace
load("Input_Data_Final.RData")
#Inter-site typical isotope standard deviations
source("Isotope_sds.R", echo=T)
###Code for conducting validation of soil carbonate model
#load required packages
library(scales)
library(readxl)
library(RColorBrewer)
# Read in input data R workspace
load("Input_Data_Final.RData")
###Code for conducting validation of soil carbonate model
#load required packages
library(scales)
library(readxl)
library(RColorBrewer)
# Read in input data R workspace
load("Input_Data_Final.RData")
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
path.data.red <- setwd(dirname(getwd()))
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
path.data.red <- dirname(dirname(getwd()))
path.data.red <- dirname(getwd())
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
paste(path.data.red, "/", path.in, "/", sep="")
path.data.red <- dirname(getwd())
path.data.red
path.data.red <- getwd()
path.data.red
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
path.data.red
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
path.data.red <- dirname(getwd())
path.data.red
path.data.red <- (getwd())
path.data.red
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
path.data.red
# Data reduction folder data path. This address should lead to "Data Reduction Procedure." No final "/" is needed.
# path.data.red <- "C:/Users/Tyler/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure" # This is the pathway on your pre-2020 computer
path.data.red <- "D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure"
path.data.red
path.data.red <- dirname(getwd())
path.data.red
path.data.red <- dirname(dirname(getwd()))
path.data.red
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
source('D:/Documents/000_Michigan/Laboratory Data Files/Data Reduction Procedure/0000_LabFileFormatting/ReactorSpreadsheetFormatter_V02.R')
