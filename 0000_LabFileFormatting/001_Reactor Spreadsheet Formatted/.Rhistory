# segments run via LINEAR correction
curData.line.flag = 1
type = paste("seg", k - (2 + nrow(segment.IPL)), "linear", sep =
"")
}
}
# Identify names for later plotting
plot.col.byCorr.names[k] = type
names(plot.col.byCorr) = plot.col.byCorr.names
# Now fill in the table
cur.smow <- subset(curData, Type.2 == "SMOW" & flag == 0)
if (curData.line.flag == 1) {
# there is linear data
# These are all written out so others can see where the numbers are coming from
d33r2 = round(curData.line[3, 2], 2)
d34r2 = round(curData.line[3, 3], 2)
segStart = min(as.numeric(curData$IPL.num))
segEnd = max(as.numeric(curData$IPL.num))
smow.SD = round(sd(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)), 0)
smow.n = nrow(cur.smow)
smow.range = round(max(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)) - min(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)))
} else {
# there is NOT linear data
d33r2 = NA
d34r2 = NA
segStart = min(as.numeric(curData$IPL.num))
segEnd = max(as.numeric(curData$IPL.num))
smow.SD = round(sd(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)), 0)
smow.n = nrow(cur.smow)
smow.range = round(max(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)) - min(as.numeric(cur.smow$D17O.SMOWSLAP.per.meg.carbNorm)))
}
# Make single set of data and put in the proper row
curColData = c(type,
d33r2,
d34r2,
segStart,
segEnd,
smow.SD,
smow.n,
smow.range)
summary.SMOW[[m[k + 1]]] = curColData
# Create dataframe of the different SMOW corrections for comparison
if (k == 1) {
# add data
corType = data.frame(matrix(
plot.col.byCorr.names[k],
ncol = 1,
nrow = length(cur.smow$Date.Time)
))
smow.all <-
data.frame(
cur.smow$IPL.num,
cur.smow$Date.Time,
cur.smow$d33,
cur.smow$d34,
cur.smow$D17O.SMOWSLAP.per.meg.carbNorm,
corType
)
# change column names (can't be done at same time apparently...)
names(smow.all) = c("IPL.num", "Date.Time", "d33", "d34", "D17O.SMOWSLAP.per.meg.carbNorm", "CorType")
count <-
ncol(smow.all) # keep track of number of columns in list
} else {
# just add on to the plot
corType = data.frame(matrix(
plot.col.byCorr.names[k],
ncol = 1,
nrow = length(cur.smow$Date.Time)
))
smow.all.add = data.frame(
cur.smow$IPL.num,
cur.smow$Date.Time,
cur.smow$d33,
cur.smow$d34,
cur.smow$D17O.SMOWSLAP.per.meg.carbNorm,
corType
)
names(smow.all.add) = c("IPL.num", "Date.Time", "d33", "d34", "D17O.SMOWSLAP.per.meg.carbNorm", "CorType")
smow.all = rbind(smow.all, smow.all.add)
count <- count + ncol(smow.all)
}
}
# Make the date format correct for ggplot (factor to date)
smow.all[, 2] <- ymd_hms(smow.all[, 2])
############################################################################################
# Summary plots for SMOW (d34, d34, and D17O vs. time)
############################################################################################
# Plots of d33-or-d34 vs. IPL# for SMOW. This view is pre-corrections, so plots will be
# the same for BASIC and LINEAR normalization schemes. Segmented corrections
# are done separately. d33 vs. IPL#
curSMOW <- subset(smow.all, CorType=="basic")
curSMOW <- select(curSMOW, IPL.num, d33, d34, CorType)
# Also add in the segment break information to be plotted as dashed lines (if it exists)
if (sum(compiled.nu.data_0$flag.major) > 0) {
plotLim_d33 = c(min(curSMOW$d33), max(curSMOW$d33))
plotLim_d34 = c(min(curSMOW$d34), max(curSMOW$d34))
callList <- c("d33", "d34")
for (rr in 1:length(segment.IPL.numList)){
if(rr==1){
hold <- data.frame(c(segment.IPL.numList[rr],(segment.IPL.numList[rr])),
plotLim_d33,
plotLim_d34,
paste("segLine",rr,sep=""))
}else{
hold2 <- data.frame(c(segment.IPL.numList[rr],(segment.IPL.numList[rr])),
plotLim_d33,
plotLim_d34,
paste("segLine",rr,sep=""))
hold <- rbind(hold,hold2)
}
}
colnames(hold) <- c("IPL.num", "d33", "d34", "CorType")
curSMOW <- rbind(curSMOW,hold)
}
listCorType = unique(curSMOW$CorType)
lengthCorType = length(listCorType)
# Plot d33 and d34 vs. IPL# up (note "Basic" must be alphabetically first)
setLineType <- c(0,2+matrix(0, nrow = (lengthCorType-1), ncol = 1))
names(setLineType) <- listCorType
setColorType <- c(24,232+matrix(0, nrow = (lengthCorType-1), ncol = 1))
names(setColorType) <- setColorType
g1 <-  ggplot(curSMOW, aes(x=IPL.num, y=d33, group=1)) +
geom_point(aes(shape=CorType),size=6) +
scale_shape_manual(values= c(16,matrix(NA, nrow = (lengthCorType-1), ncol = 1)))+
#
geom_line(aes(group=CorType,linetype=CorType, color=CorType),size=1) +
scale_linetype_manual(values = setLineType) +
scale_color_manual(values = colors()[setColorType])+
themeA +
xlab("IPL#") +
ylab(expression(paste("",delta,"33")))+
ggtitle('raw SMOW values')+
theme(plot.title = element_text(hjust=0.5))
# d34 vs. IPL#
g2 <-  ggplot(curSMOW, aes(x=IPL.num, y=d34)) +
geom_point(aes(shape=CorType),size=6) +
scale_shape_manual(values= c(16,matrix(NA, nrow = (lengthCorType-1), ncol = 1)))+
#
geom_line(aes(group=CorType,linetype=CorType, color=CorType),size=1) +
scale_linetype_manual(values = setLineType) +
scale_color_manual(values = colors()[setColorType])+
themeA +
xlab("IPL#") +
ylab(expression(paste("",delta,"34")))
gB_d33_d34_SMOW <- grid.arrange(g1,g2)
# Save figure to file
pdf(file = paste(path.out, "basic_figures", "/", "R", reactor.file.number, "_", "1d33d34_SMOW.pdf",sep=""),   # The directory you want to save the file in
width = 26, # The width of the plot in inches
height = 18) # The height of the plot in inches
grid::grid.draw(gB_d33_d34_SMOW)
dev.off()
# Individual plots of SMOWs by correction scheme
plot.list.smow = list() # Set up list of plots
# set x and y limits
xlimSet <- c(min(compiled.nu.data$IPL.num),max(compiled.nu.data$IPL.num))
ylimSet <- c(min(smow.all$D17O.SMOWSLAP.per.meg.carbNorm),max(smow.all$D17O.SMOWSLAP.per.meg.carbNorm))
for (r in 1:length(data.cor)) {
curData = data.cor[[r]]
curSMOW = subset(curData, Type.2 == "SMOW" & flag == 0)
plot.list.smow[[r]] <- ggplot(curSMOW, aes(x=IPL.num, y=D17O.SMOWSLAP.per.meg.carbNorm))+
geom_point(size=3) +
scale_color_manual(values=plot.col.byCorr)+
themeA+
xlab('IPL#')+
ylab(expression(paste(Delta ^"'17", "O (per meg)",sep="")))+
ggtitle(paste(plot.col.byCorr.names[r], " correction" ,sep=""))+
xlim(xlimSet)+
ylim(ylimSet)
}
# Add on a plot of SMOWs in all correction schemes together
r.end <- length(data.cor)+1
plot.list.smow[[r.end]] <-ggplot(smow.all, aes(x=IPL.num, y=D17O.SMOWSLAP.per.meg.carbNorm,
color = CorType))+
geom_point(aes(group=CorType, color=CorType, shape=CorType),size=3)+
scale_color_manual(values = plot.col.byCorr)+
themeA+
xlab('IPL#')+
ylab(expression(paste(Delta ^"'17", "O (per meg)",sep="")))+
ggtitle("all correction types")+
xlim(xlimSet)+
ylim(ylimSet)+
theme(legend.position = c(1.1, 0.5), legend.title = element_blank())
gb_allCorr_SMOW <- grid.arrange(grobs = plot.list.smow, ncol = 3)
# Save figure to file
pdf(file = paste(path.out, "basic_figures", "/", "R", reactor.file.number, "_", "2allCorr_SMOW.pdf",sep=""),   # The directory you want to save the file in
width = 26, # The width of the plot in inches
height = 18) # The height of the plot in inches
grid::grid.draw(gb_allCorr_SMOW)
dev.off()
############################################################################################
# Summary tables and plots for primary and secondary standards
############################################################################################
# Summary tables and plots to compare primary and secondary standards - also by mode of correction
# This plots up the different correction schemes next to each other
plot.list.std = list()#  vector(mode = "list", length = (ncol(summary.SMOW)-1))
all.std = list()
summary.std = list()
for (r in 1:length(data.cor))
{
for (rr in 1:length(standards))
{
curData = data.cor[[r]]
cur.std = subset(curData, Type.2 == standards[[rr]] &
flag == 0)
# Find current standard's accepted value
cur.accepted <-
subset(std.accepted, standard == standards[rr])
# Calculate and add the current standard's residual to the dataframe
cur.std$d18O.accept <-
cur.std$dp18O.SMOWSLAP * 0 + cur.accepted$d18O.per.mil.accepted
cur.std$D17O.accept <-
cur.std$D17O.SMOWSLAP.per.meg.carbNorm * 0 + cur.accepted$D17O.per.meg.accepted
cur.std$residual <-
cur.std$D17O.SMOWSLAP.per.meg.carbNorm - cur.accepted$D17O.per.meg.accepted
# calculate average info for the summary-standards list
avg = round(mean(cur.std$D17O.SMOWSLAP.per.meg.carbNorm), 0)
avg.resid = round(avg - cur.accepted$D17O.per.meg.accepted, 0)
n = nrow(cur.std) # number of replicates
SD = round(sd(cur.std$D17O.SMOWSLAP.per.meg.carbNorm), 0) # standard deviation of replicates
if (rr == 1) {
# note SMOW always exists in every run
cur.std.mat <- cur.std
cur.std.mat.avg <-
data.frame(
cur.accepted$d18O.per.mil.accepted,
cur.accepted$D17O.per.meg.accepted,
avg,
avg.resid,
n,
SD
)
cur.std.mat.avg.rownames = standards[rr]
} else if (rr > 1 &
nrow(cur.std) == 0) {
# the standard was not analyzed during this reactor
# fill with NAs
a = 2
na.replacer <-
data.frame(matrix(NA, nrow = 1, ncol = ncol(cur.std.mat)))
names(na.replacer) <- names(cur.std.mat)
cur.std.mat <- rbind(cur.std.mat, na.replacer)
na.replacer2 <-
data.frame(matrix(
NA,
nrow = 1,
ncol = ncol(cur.std.mat.avg)
))
names(na.replacer2) <- names(cur.std.mat.avg)
cur.std.mat.avg <- rbind(cur.std.mat.avg, na.replacer2)
cur.std.mat.avg.rownames = rbind(cur.std.mat.avg.rownames, standards[rr])
} else if (rr > 1 &
nrow(cur.std) > 0) {
# the standard was analyzed during this reactor
a = 3
cur.std.mat <- rbind(cur.std.mat, cur.std)
cur.std.mat.avg <-
rbind(
cur.std.mat.avg,
c(
cur.accepted$d18O.per.mil.accepted,
cur.accepted$D17O.per.meg.accepted,
avg,
avg.resid,
n,
SD
)
)
cur.std.mat.avg.rownames = rbind(cur.std.mat.avg.rownames, standards[rr])
}
}
if (nrow(cur.std.mat) > 0) {
# Update the plotting list if the standard was run in this reactor
plot.list.std[[r]] <-ggplot(cur.std.mat, aes(x=IPL.num, y=residual, group=Type.2))+
geom_point(aes(group=Type.2, color=Type.2, shape=Type.2, fill=Type.2),size=3)+
scale_color_manual(values = plotting.colors.byStd)+
scale_shape_manual(values=plotting.shapes.byStd)+
scale_fill_manual(values=plotting.colors.byStd) +
themeA+
xlab('IPL#')+
ylab(expression(atop(paste(Delta ^"'17", "O residual",sep=""),"(obs-exp, per meg)")))+
ggtitle(paste(plot.col.byCorr.names[r], " correction" ,sep=""))+
xlim(xlimSet)
# theme(legend.position = c(1, 0.5), legend.title = element_blank())
}
# Update the all-standards list each correction loop
all.std[[r]] <- cur.std.mat
# Update summary-standards list each correction loop
names(cur.std.mat.avg) <-
c("d18O.accept",
"D17O.accept",
"avg.D17O",
"avg.D17O.resid",
"n",
"SD")
row.names(cur.std.mat.avg) <- cur.std.mat.avg.rownames
summary.std[[r]] <- cur.std.mat.avg
}
# Force a common legend to plot
r.end <- length(data.cor)+1
# Make unused data
xUnused <- data.frame(matrix(0, nrow = length(plotting.colors.byStd), ncol = 1))
yUnused <- data.frame(matrix(0, nrow = length(plotting.colors.byStd), ncol = 1))
gUnused <- names(plotting.shapes.byStd)
dataUnused <- cbind(xUnused,yUnused,gUnused)
colnames(dataUnused) <- c("c1","c2","c3")
plot.list.std[[r.end]] <- ggplot(dataUnused, aes(x=c1, y=c2, group=c3))+
geom_point(aes(group=c3, color=c3, shape=c3, fill=c3),size=3)+
scale_color_manual(values = plotting.colors.byStd)+
scale_shape_manual(values= plotting.shapes.byStd)+
scale_fill_manual(values= plotting.colors.byStd) +
themeA+
theme(legend.position = c(0.5, 0.5), legend.title = element_blank())
# Replace the unused data plot with a legend
legend <- cowplot::get_legend(plot.list.std[[r.end]])
plot.list.std[[r.end]] <- legend
gB_allCorr_std <- grid.arrange(grobs = plot.list.std, ncol=3)
# Save figure to file
pdf(file = paste(path.out, "basic_figures", "/", "R", reactor.file.number, "_", "3allCorr_std.pdf",sep=""),   # The directory you want to save the file in
width = 26, # The width of the plot in inches
height = 18) # The height of the plot in inches
grid::grid.draw(gB_allCorr_std)
dev.off()
############################################################################################
# Plot of all data through time
############################################################################################
# This plots up all data using the BASIC correction scheme. Good for a first
# look at the data and is always capable of plotting. Session breaks are marked, but unused.
# Samples are grouped by their project identifier (i.e., within a Type.1, each Type.2 gets its own graph)
# Take only the BASIC correction data
curData0 <- data.cor[[1]]
names.Type.1 <- unique(curData0$Type.1)
nrow_set <- 2 + 1 # adjust number of rows (#rows + 1)
for (r in 1:length(names.Type.1)){
# Get current Type.1 subset of data
curData = subset(curData0,Type.1==names.Type.1[r] & flag == 0)
# Plot up each Type.2 on its own
names.Type.2 <- unique(curData$Type.2)
plot.list.names = list() # empty plot list each loop
x.count <- 1 # counter to decide when to plot x label
y.count <- 1 # counter to decide when to plot y label
for (kk in 1:length(names.Type.2)){ # each standard gets its own subplot
# Make a list of relevant data, coordinated by sample.ID.
dataset <- subset(curData,curData$Type.2==names.Type.2[kk])
if (x.count == (nrow_set-1)){ # bottom row gets x-axis label
x.label <- "" # no x-label is needed, samples are all individually labeled
} else {
x.label <- ""
}
x.count <- x.count+1
if (x.count>(nrow_set-1)){
x.count <- 1
}
if (y.count <= (nrow_set-1)){
y.label <- expression(paste(Delta ^"'17", "O (per meg)",sep=""))
} else {
y.label <- ""
}
y.count <- y.count+1
title.label <- names.Type.2[kk]
# ensure there is minimum variability in the y-limit to avoid unnecessary digits in y-axis
ymin <- min(dataset$D17O.SMOWSLAP.per.meg.carbNorm,na.rm = TRUE)
ymax <- max(dataset$D17O.SMOWSLAP.per.meg.carbNorm,na.rm = TRUE)
yavg <- floor(mean(dataset$D17O.SMOWSLAP.per.meg.carbNorm,na.rm = TRUE))
if ((ymax-ymin)<8){
ylimSet <- c(yavg-5,yavg+5)
}else{
ylimSet <- c(ymin, ymax)
}
plot.list.names[[kk]] <- ggplot(dataset, aes(x=sample.ID, y=D17O.SMOWSLAP.per.meg.carbNorm, fill=sample.ID))+
geom_boxplot()+
geom_jitter(color="black", size=0.4, alpha=0.9) +
themeA+
xlab(x.label)+
ylab(y.label)+
ggtitle(title.label)+
theme(legend.position = "none")+
ylim(ylimSet)+
theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))
}
# Pad to end of column
yy <- length(plot.list.names)
while (x.count<(nrow_set)){ # padding is needed if condition is not met
yy <- yy+1
plot.list.names[[yy]] <- ggplot() + theme_void()
x.count <- x.count+1
}
# set up grid and grob calls for plotting everything with consistent plot size
rCount <- 1
cCount <- 1
for(k in 1:length(plot.list.names)){
if (rCount==1){
gA <- ggplotGrob(plot.list.names[[k]])
}else{
gA <- rbind(gA, ggplotGrob(plot.list.names[[k]]))
}
rCount <- rCount+1
# add by column if rCount reaches max
if (rCount==nrow_set){
rCount=1
if (cCount==1){
gB <- gA
}else{
gB <- cbind(gB,gA)
}
cCount <- cCount+1
}
}
grid::grid.newpage()
grid::grid.draw(gB)
# Save figure to file
pdf(file = paste(path.out, "basic_figures", "/", "R", reactor.file.number, "_4box_", names.Type.1[r],".pdf",sep=""),   # The directory you want to save the file in
width = 26, # The width of the plot in inches
height = 18) # The height of the plot in inches
grid::grid.draw(gB)
dev.off()
}
############################################################################################
# Output corrected data for all and auto-preferred correction schemes
############################################################################################
# Output corrected data and summary of standards - all correction schemes
for (k in 1:length(summary.std)) {
curFile.data.cor = paste(path.out,
"R",
prefix,
"_corData_",
plot.col.byCorr.names[k],
".csv",
sep = "")
curFile.data.cor.line.stats = paste(
path.out,
"R",
prefix,
"_corDataLineStats_",
plot.col.byCorr.names[k],
".csv",
sep = ""
)
curFile.summary.std = paste(path.out,
"R",
prefix,
"_summaryStd_",
plot.col.byCorr.names[k],
".csv",
sep = "")
write.csv(data.cor[[k]], curFile.data.cor, row.names = FALSE)
write.csv(data.cor.line.stats[[k]],
curFile.data.cor.line.stats,
row.names = FALSE)
write.csv(summary.std[[k]], curFile.summary.std, row.names = FALSE)
}
############################################################################################
# Set up input for data post-processing program
############################################################################################
# prefer.auto is set as:
# 1 - basic
# 2 - linear
# 3 - segmented - basic
# 4 - segmented - linear
if (segment.IPL[1, 1] == -9999) { # there are no segments
# Start off by assuming only basic correction
prefer.auto = 1 # basic correction preferred
numSeg = 0 # There are no segments
# If the rsq threshold was met, switch to the linear correction
if (data.cor.line.stats[[2]][3, 2] > threshold.rsq &
data.cor.line.stats[[2]][3, 3] > threshold.rsq) {
prefer.auto = 2
}
} else { # segments exist
prefer.auto = 3
numSeg = length(segment.IPL.numList) - 1 # total number of segments to look for
# If there are segments, add in the auto-preferred ones
for (k in 1:numSeg) {
# start off by assuming basic correction is preferred
prefer.auto.segChoice = 1 # basic correction preferred for this segment
# If the rsq threshold was met for this segment, switch to the linear correction
if (data.cor.line.stats[[2+numSeg+k]][3, 2] > threshold.rsq &
data.cor.line.stats[[2+numSeg+k]][3, 3] > threshold.rsq) { # '2+2' is for basic, linear, and segment-basic corrections. These are not used here
prefer.auto.segChoice = 2
}
assign(paste("prefer.auto.seg", k, sep = ""), prefer.auto.segChoice)
}
}
# Import and update the postProcessInput file
# Pick the correct file - for JHU or UM data
if (JHUorUM == 1){ # this is JHU data
path.post <-  paste(path.out, "postProcessInputJHU.csv", sep = "")
} else{ # this is UM data
path.post <-  paste(path.out, "postProcessInput.csv", sep = "")
}
data.post <- read.csv(path.post, skip = 0)
data.post$numSeg[reactor.file.number] = numSeg # How many segments does reactor have
data.post$prefer.auto[reactor.file.number] = prefer.auto # auto-preferred calibration
data.post$last.update[reactor.file.number] = format(Sys.Date(), "%Y%m%d") # time of last update (YYYYMMDD). Keeping this as a number avoids an error when saving in excel, which will probably be done.
# Set the prefered calibrations for each segment
if (numSeg>0){
for (k in 1:numSeg) {
data.post[[paste("prefer.auto.seg", k, sep = "")]][[reactor.file.number]] <-
get(paste("prefer.auto.seg", k, sep = ""))
}
}
# Reset all of the user-required values each time data is corrected ("prefer.user..."). These control the correction scheme used for data post-processing. This is done to force the user to verify the correction scheme they want by hand before data can be post-processed.
data.post$prefer.user[reactor.file.number] = -9999 # no data flag
for (k in 1:5) {
# currently there are 5 allowed segments in a single run. If there are ever more, update this value
data.post[[paste("prefer.user.seg", k, sep = "")]][[reactor.file.number]] <-
-9999
}
# Export the revised file
write.csv(data.post, path.post, row.names = FALSE)
# Reminder that to sort the corrected data, user needs to select the preferred correction scheme.
print(paste("Reminder: select preferred correction for Reactor ", reactor.file.number, " in postProcessInput.csv",sep=""))
}
